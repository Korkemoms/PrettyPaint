/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 * <p>
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * <p>
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * <p>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package org.core.clipper;

import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.utils.Array;

/**
 *
 * @author Andreas
 */
public class Simplify {

        private static final double scale = 1000000;

        private static Point.LongPoint convertToLongPoint(Vector2 v) {
                return new Point.LongPoint((long) (v.x * scale), (long) (v.y * scale));
        }

        private static Vector2 convertToVector(Point.LongPoint lp) {
                return new Vector2((float) (lp.getX() / scale), (float) (lp.getY() / scale));
        }

        public static Array<Array<Vector2>> simplify(Array<Vector2> vertices) {
                Path path = new Path();
                for (Vector2 v : vertices) {
                        path.add(convertToLongPoint(v));
                }
                Paths paths = DefaultClipper.simplifyPolygon(path);

                Array<Array<Vector2>> vv = new Array();
                for (int i = 0; i < paths.size(); i++) {
                        Array<Vector2> v = new Array();

                        for (Point.LongPoint p : paths.get(i)) {
                                v.add(convertToVector(p));
                        }
                        vv.add(v);
                }
                return vv;
        }
}
